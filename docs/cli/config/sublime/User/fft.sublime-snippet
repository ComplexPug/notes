<snippet>
	<content><![CDATA[
namespace fft {
    const double Pi=acos(-1);
    int r[_],limit=1;
    struct Complex {
        double x,y;
        Complex(double xx=0,double yy=0) {x=xx,y=yy;}
    }a[_],b[_];
    Complex operator + (Complex a,Complex b) {return Complex(a.x+b.x,a.y+b.y);}
    Complex operator - (Complex a,Complex b) {return Complex(a.x-b.x,a.y-b.y);}
    Complex operator * (Complex a,Complex b) {return Complex(a.x*b.x-a.y*b.y,a.x*b.y+b.x*a.y);}
    void fft(Complex *a,int type) {
        for(int i=0;i<=limit;++i)
            if(i<r[i]) swap(a[r[i]],a[i]);
        for(int mid=1;mid<limit;mid<<=1) {
            Complex Wn(cos(Pi/mid),type*sin(Pi/mid));
            for(int R=mid<<1,j=0;j<limit;j+=R) {
                Complex w(1,0);
                for(int k=0;k<mid;++k,w=w*Wn) {
                    Complex x=a[j+k],y=w*a[j+k+mid];
                    a[j+k]=x+y;
                    a[j+k+mid]=x-y;
                }
            }
        }
    }
    // a -> [0,lena] b -> [0,lenb]
    void mul(int *A,int *B,int lena,int lenb) {
        for(int i=0;i<=lena;++i) a[i].x=A[i];
        for(int i=0;i<=lenb;++i) b[i].x=B[i];
        limit=1;
        int l=0;while(limit<=lena+lenb) limit<<=1,l++;
        for(int i=0;i<=limit;++i)
            r[i]=(r[i>>1]>>1)|((i&1)<<(l-1));
        fft(a,1),fft(b,1);
        for(int i=0;i<=limit;++i) a[i]=a[i]*b[i];
        fft(a,-1);
        for(int i=0;i<=lena+lenb;++i) A[i]=(int)(a[i].x/limit+0.5);
        for(int i=0;i<=limit;++i) a[i]=b[i]=Complex{0,0};
    }
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>fft</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
