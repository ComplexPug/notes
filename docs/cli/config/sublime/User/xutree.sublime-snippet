<snippet>
	<content><![CDATA[
namespace tree {
    int dep[_],st[_][21],dfn[_],dfn_cnt;
    int st_w[_][21];
    void dfs(int u,int f) {
        dfn[u]=++dfn_cnt;
        for(auto [v,w]:g[u]) {
            if(v==f) continue;
            dep[v]=dep[u]+1;
            st[v][0]=u;
            st_w[v][0]=w;
            dfs(v,u);
        }
    }
    int lca(int x,int y) {
        if(dep[x]<dep[y]) swap(x,y);
        for(int i=20;i>=0;--i) if(dep[ st[x][i] ]>=dep[y]) {
            x=st[x][i];
        }
        if(x==y) return x;
        for(int i=20;i>=0;--i) if(st[x][i]!=st[y][i]) {
            x=st[x][i],y=st[y][i];
        }
        x=st[x][0];
        return x;
    }
    int cal(int x,int y) {
        if(dep[x]<dep[y]) swap(x,y);
        int res=inf;
        for(int i=20;i>=0;--i)
            if(dep[ st[x][i] ]>=dep[y]) {
                res=min(res,st_w[x][i]);
                x=st[x][i];
            }
        if(x==y) return res;
        for(int i=20;i>=0;--i)
            if(st[x][i]!=st[y][i]) {
                res=min(res,st_w[x][i]);
                res=min(res,st_w[y][i]);
                x=st[x][i],y=st[y][i];
            }
        res=min(res,st_w[x][0]);
        x=st[x][0];
        return res;
    }
    void init(int rt,int n) {
        dep[rt]=1;
        dfs(rt,0);
        FOR(j,1,20) FOR(i,1,n) {
            st[i][j]=st[st[i][j-1]][j-1];
            st_w[i][j]=min(st_w[i][j-1],st_w[st[i][j-1]][j-1]);
        }
    }
    int stk[_],top;
    vector<int> build(vector<int>& q) { //dricted edge
        sort(q.begin(),q.end(),[&](int a,int b){
            return dfn[a] < dfn[b]; 
        });
        vector<int> ans;
        ans.push_back(1);
        auto new_add=[&](int fa , int x) -> void {
            ans.push_back(x);
            ng[fa].push_back({x,cal(x,fa)});
        };
        stk[top=1]=1;
        ng[1].clear();
        for(int x : q) {
            if(x==1) continue;
            int p=lca(x,stk[top]);
            if(p!=stk[top]) {
                while(dfn[p]<dfn[stk[top-1]]) {
                    new_add(stk[top-1],stk[top]);
                    --top; 
                }
                if(dfn[p]!=dfn[stk[top-1]]) {
                    ng[p].clear();
                    new_add(p,stk[top]);
                    stk[top]=p; 
                }
                else new_add(p,stk[top--]);
            }
            ng[x].clear();
            stk[++top]=x; 
        }
        for(int i=1;i<top;++i) new_add(stk[i],stk[i+1]);
        return ans;
    }
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>xutree</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
