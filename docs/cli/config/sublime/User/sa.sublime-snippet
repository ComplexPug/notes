<snippet>
	<content><![CDATA[
int n;
char s[_];
namespace SA {
    #define FOR(i,a,b) for(int i=a;i<=b;++i)
    #define ROF(i,a,b) for(int i=a;i>=b;--i)
    int sa[_],rk[_],c[_],x[_],height[_],st[_][21];
    void clear() {
        memset(sa,0,sizeof(sa));
        memset(rk,0,sizeof(rk));
        memset(c,0,sizeof(c));
        memset(x,0,sizeof(x));
        memset(height,0,sizeof(height));
        memset(st,0,sizeof(st));
    }
    void get_sa() {
        int m=300;
        FOR(i,1,n) ++c[rk[i]=s[i]];
        FOR(i,1,m) c[i]+=c[i-1];
        ROF(i,n,1) sa[c[rk[i]]--]=i;
        for(int k=1;k<=n;k<<=1) {
            int p=0;
            FOR(i,n-k+1,n) x[++p]=i;
            FOR(i,1,n) if(sa[i]>k) x[++p]=sa[i]-k;
            FOR(i,1,m) c[i]=0;
            FOR(i,1,n) ++c[rk[i]];
            FOR(i,1,m) c[i]+=c[i-1];
            ROF(i,n,1) sa[c[rk[x[i]]]--]=x[i],x[i]=0;
            swap(rk,x);
            rk[sa[1]]=1,p=1;
            FOR(i,2,n) rk[sa[i]]=(x[sa[i]]==x[sa[i-1]]&&x[sa[i]+k]==x[sa[i-1]+k]) ? p : ++p;
            if(p==n) break;
            m=p;
        }
    }
    void get_height() {
        FOR(i,1,n) rk[sa[i]]=i;
        int k=0;
        FOR(i,1,n) {
            k=k?k-1:0;
            int j=sa[rk[i]-1];
            while(s[i+k]==s[j+k]&&i+k<=n&&j+k<=n) k++;
            height[rk[i]]=k;
        }
        height[0]=0;
        FOR(i,1,n) st[i][0]=height[i];
        FOR(j,1,20) 
        for(int i=1;i+(1<<j)-1<=n;++i)
        st[i][j]=min(st[i][j-1],st[i+(1<<(j-1))][j-1]);
    }
    int LCP(int i,int j) {
        if (i == j) return n + 1 - sa[i] ; 
        if (i > j) swap(i , j) ; ++ i ; 
        int x=__lg(j-i+1);
        return min(st[i][x],st[j-(1<<x)+1][x]);
    }
}
void solve(int S,int T,int k) {
    int L,R,l,r;
    l=1,r=SA::rk[S];
    while(l<=r) {
        int mid=(l+r)>>1;
        if(SA::LCP(mid+1,SA::rk[S])>=T-S+1) L=mid,r=mid-1;
        else l=mid+1;
    }
    l=SA::rk[S],r=n;
    while(l<=r) {
        int mid=(l+r)>>1;
        if(SA::LCP(SA::rk[S]+1,mid)>=T-S+1) R=mid,l=mid+1;
        else r=mid-1;
    }
    cout<L<<" "<<R<<"\n";
}
int main() {
    scanf("%s",s+1);
    n=strlen(s+1);
    SA::get_sa();
    SA::get_height();
    return 0;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>sa</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
